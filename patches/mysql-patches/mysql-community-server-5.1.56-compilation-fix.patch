PATCH-P0-HACK-SUSE: Fixing few compilation problems

Mostly minor things. Mostly just to make compiler happy as it can't determine
that everything is ok. But few things might actually worth reporting as they
could be handled better (mostly the write calls).

Maintainer: Michal Hrusecky <mhrusecky@suse.cz>

Index: client/readline.cc
===================================================================
--- client/readline.cc.orig
+++ client/readline.cc
@@ -55,7 +55,7 @@ LINE_BUFFER *batch_readline_init(ulong m
 char *batch_readline(LINE_BUFFER *line_buff)
 {
   char *pos;
-  ulong out_length;
+  ulong out_length=0;
 
   if (!(pos=intern_read_line(line_buff, &out_length)))
     return 0;
Index: storage/innobase/ut/ut0ut.c
===================================================================
--- storage/innobase/ut/ut0ut.c.orig
+++ storage/innobase/ut/ut0ut.c
@@ -495,7 +495,9 @@ ut_print_namel(
 				       trx ? trx->mysql_thd : NULL,
 				       table_id);
 
-	fwrite(buf, 1, bufend - buf, f);
+	if(fwrite(buf, 1, bufend - buf, f) != (size_t)max(0,(bufend - buf))) {
+		fprintf(stderr, "fwrite failed in ut_print_namel!!!\n");
+	}
 }
 
 /**************************************************************************
@@ -516,7 +518,8 @@ ut_copy_file(
 			? (size_t) len
 			: sizeof buf;
 		size_t	size = fread(buf, 1, maxs, src);
-		fwrite(buf, 1, size, dest);
+		if(fwrite(buf, size, 1, dest)<size)
+			break;
 		len -= (long) size;
 		if (size < maxs) {
 			break;
Index: storage/innodb_plugin/ut/ut0ut.c
===================================================================
--- storage/innodb_plugin/ut/ut0ut.c.orig
+++ storage/innodb_plugin/ut/ut0ut.c
@@ -553,7 +553,9 @@ ut_print_namel(
 				       trx ? trx->mysql_thd : NULL,
 				       table_id);
 
-	fwrite(buf, 1, bufend - buf, f);
+	if(fwrite(buf, 1, bufend - buf, f) != (size_t)max(0,(bufend - buf))) {
+		fprintf(stderr, "fwrite failed in ut_print_namel!!!\n");
+	}
 }
 
 /**********************************************************************//**
@@ -574,7 +576,8 @@ ut_copy_file(
 			? (size_t) len
 			: sizeof buf;
 		size_t	size = fread(buf, 1, maxs, src);
-		fwrite(buf, 1, size, dest);
+		if(fwrite(buf, size, 1, dest)<size)
+			break;
 		len -= (long) size;
 		if (size < maxs) {
 			break;
Index: storage/ndb/src/common/util/ndb_init.c
===================================================================
--- storage/ndb/src/common/util/ndb_init.c.orig
+++ storage/ndb/src/common/util/ndb_init.c
@@ -31,7 +31,7 @@ ndb_init()
 {
   if (my_init()) {
     const char* err = "my_init() failed - exit\n";
-    write(2, err, strlen(err));
+    fprintf(stderr, err, strlen(err));
     exit(1);
   }
   ndb_init_internal();
Index: sql/log.cc
===================================================================
--- sql/log.cc.orig
+++ sql/log.cc
@@ -1854,7 +1854,7 @@ static void setup_windows_event_source()
 
 static int find_uniq_filename(char *name)
 {
-  long                  number;
+  long                  number=0;
   uint                  i;
   char                  buff[FN_REFLEN];
   struct st_my_dir     *dir_info;
Index: sql/filesort.cc
===================================================================
--- sql/filesort.cc.orig
+++ sql/filesort.cc
@@ -438,16 +438,20 @@ static void dbug_print_record(TABLE *tab
     Field *field=  *pfield;
 
     if (field->is_null())
-      fwrite("NULL", sizeof(char), 4, DBUG_FILE);
+      if(fwrite("NULL", sizeof(char), 4, DBUG_FILE) != sizeof(char) * 4)
+      	break;
    
     if (field->type() == MYSQL_TYPE_BIT)
       (void) field->val_int_as_str(&tmp, 1);
     else
       field->val_str(&tmp);
 
-    fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE);
+    if(fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE) !=
+      sizeof(char) * tmp.length())
+        break;
     if (pfield[1])
-      fwrite(", ", sizeof(char), 2, DBUG_FILE);
+      if(fwrite(", ", sizeof(char), 2, DBUG_FILE) != sizeof(char) * 2)
+        break;
   }
   fprintf(DBUG_FILE, ")");
   if (print_rowid)
Index: sql/opt_range.cc
===================================================================
--- sql/opt_range.cc.orig
+++ sql/opt_range.cc
@@ -11344,7 +11344,8 @@ print_key(KEY_PART *key_part, const ucha
     {
       if (*key)
       {
-	fwrite("NULL",sizeof(char),4,DBUG_FILE);
+	if(fwrite("NULL",sizeof(char),4,DBUG_FILE)!=4*sizeof(char))
+	  break;
 	continue;
       }
       key++;					// Skip null byte
@@ -11355,7 +11356,8 @@ print_key(KEY_PART *key_part, const ucha
       (void) field->val_int_as_str(&tmp, 1);
     else
       field->val_str(&tmp);
-    fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE);
+    if(fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE)!=sizeof(char)*tmp.length())
+      break;
     if (key+store_length < key_end)
       fputc('/',DBUG_FILE);
   }
Index: sql/sql_table.cc
===================================================================
--- sql/sql_table.cc.orig
+++ sql/sql_table.cc
@@ -6955,7 +6955,7 @@ view_err:
     need_copy_table= ALTER_TABLE_DATA_CHANGED;
   else
   {
-    enum_alter_table_change_level need_copy_table_res;
+    enum_alter_table_change_level need_copy_table_res = ALTER_TABLE_DATA_CHANGED;
     /* Check how much the tables differ. */
     if (compare_tables(table, alter_info,
                        create_info, order_num,
Index: sql/debug_sync.cc
===================================================================
--- sql/debug_sync.cc.orig
+++ sql/debug_sync.cc
@@ -1721,6 +1721,7 @@ static void debug_sync_execute(THD *thd,
     const char *UNINIT_VAR(old_proc_info);
 
     action->execute--;
+    old_proc_info = NULL;
 
     /*
       If we will be going to wait, set proc_info for the PROCESSLIST table.
