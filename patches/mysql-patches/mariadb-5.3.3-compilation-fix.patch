PATCH-P0-HACK-SUSE: Fixing few compilation problems

Mostly minor things. Mostly just to make compiler happy as it can't determine
that everything is ok. But few things might actually worth reporting as they
could be handled better (mostly the write calls).

Maintainer: Michal Hrusecky <mhrusecky@suse.cz>

Index: client/readline.cc
===================================================================
--- client/readline.cc.orig
+++ client/readline.cc
@@ -57,7 +57,7 @@ LINE_BUFFER *batch_readline_init(ulong m
 char *batch_readline(LINE_BUFFER *line_buff)
 {
   char *pos;
-  ulong out_length;
+  ulong out_length=0;
   LINT_INIT(out_length);
 
   if (!(pos=intern_read_line(line_buff, &out_length)))
Index: storage/innodb_plugin/ut/ut0ut.c
===================================================================
--- storage/innodb_plugin/ut/ut0ut.c.orig
+++ storage/innodb_plugin/ut/ut0ut.c
@@ -553,7 +553,9 @@ ut_print_namel(
 				       trx ? trx->mysql_thd : NULL,
 				       table_id);
 
-	fwrite(buf, 1, bufend - buf, f);
+	if(fwrite(buf, 1, bufend - buf, f) != (size_t)max(0,(bufend - buf))) {
+		fprintf(stderr, "fwrite failed in ut_print_namel!!!\n");
+	}
 }
 
 /**********************************************************************//**
@@ -574,7 +576,8 @@ ut_copy_file(
 			? (size_t) len
 			: sizeof buf;
 		size_t	size = fread(buf, 1, maxs, src);
-		fwrite(buf, 1, size, dest);
+		if(fwrite(buf, size, 1, dest)<size)
+			break;
 		len -= (long) size;
 		if (size < maxs) {
 			break;
Index: storage/ndb/src/common/util/ndb_init.c
===================================================================
--- storage/ndb/src/common/util/ndb_init.c.orig
+++ storage/ndb/src/common/util/ndb_init.c
@@ -31,7 +31,7 @@ ndb_init()
 {
   if (my_init()) {
     const char* err = "my_init() failed - exit\n";
-    write(2, err, strlen(err));
+    fprintf(stderr, err, strlen(err));
     exit(1);
   }
   ndb_init_internal();
Index: sql/log.cc
===================================================================
--- sql/log.cc.orig
+++ sql/log.cc
@@ -1936,7 +1936,7 @@ static void setup_windows_event_source()
 
 static int find_uniq_filename(char *name)
 {
-  long                  number;
+  long                  number=0;
   uint                  i;
   char                  buff[FN_REFLEN];
   struct st_my_dir     *dir_info;
Index: sql/filesort.cc
===================================================================
--- sql/filesort.cc.orig
+++ sql/filesort.cc
@@ -435,16 +435,20 @@ static void dbug_print_record(TABLE *tab
     Field *field=  *pfield;
 
     if (field->is_null())
-      fwrite("NULL", sizeof(char), 4, DBUG_FILE);
+      if(fwrite("NULL", sizeof(char), 4, DBUG_FILE) != sizeof(char) * 4)
+      	break;
    
     if (field->type() == MYSQL_TYPE_BIT)
       (void) field->val_int_as_str(&tmp, 1);
     else
       field->val_str(&tmp);
 
-    fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE);
+    if(fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE) !=
+      sizeof(char) * tmp.length())
+        break;
     if (pfield[1])
-      fwrite(", ", sizeof(char), 2, DBUG_FILE);
+      if(fwrite(", ", sizeof(char), 2, DBUG_FILE) != sizeof(char) * 2)
+        break;
   }
   fprintf(DBUG_FILE, ")");
   if (print_rowid)
Index: sql/opt_range.cc
===================================================================
--- sql/opt_range.cc.orig
+++ sql/opt_range.cc
@@ -13668,7 +13668,8 @@ print_key(KEY_PART *key_part, const ucha
     {
       if (*key)
       {
-	fwrite("NULL",sizeof(char),4,DBUG_FILE);
+	if(fwrite("NULL",sizeof(char),4,DBUG_FILE)!=4*sizeof(char))
+	  break;
 	continue;
       }
       key++;					// Skip null byte
@@ -13679,7 +13680,8 @@ print_key(KEY_PART *key_part, const ucha
       (void) field->val_int_as_str(&tmp, 1);
     else
       field->val_str(&tmp);
-    fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE);
+    if(fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE)!=sizeof(char)*tmp.length())
+      break;
     if (key+store_length < key_end)
       fputc('/',DBUG_FILE);
   }
Index: sql/debug_sync.cc
===================================================================
--- sql/debug_sync.cc.orig
+++ sql/debug_sync.cc
@@ -1722,6 +1722,7 @@ static void debug_sync_execute(THD *thd,
     LINT_INIT(old_proc_info);
 
     action->execute--;
+    old_proc_info = NULL;
 
     /*
       If we will be going to wait, set proc_info for the PROCESSLIST table.
Index: storage/xtradb/ut/ut0ut.c
===================================================================
--- storage/xtradb/ut/ut0ut.c.orig
+++ storage/xtradb/ut/ut0ut.c
@@ -552,8 +552,9 @@ ut_print_namel(
 				       name, namelen,
 				       trx ? trx->mysql_thd : NULL,
 				       table_id);
-
-	(void) fwrite(buf, 1, bufend - buf, f);
+	if(fwrite(buf, 1, bufend - buf, f) != (size_t)max(0,(bufend - buf))) {
+		fprintf(stderr, "fwrite failed in ut_print_namel!!!\n");
+	}
 }
 
 /**********************************************************************//**
@@ -574,7 +575,8 @@ ut_copy_file(
 			? (size_t) len
 			: sizeof buf;
 		size_t	size = fread(buf, 1, maxs, src);
-		(void) fwrite(buf, 1, size, dest);
+		if(fwrite(buf, size, 1, dest)<size)
+			break;
 		len -= (long) size;
 		if (size < maxs) {
 			break;
Index: storage/maria/ma_open.c
===================================================================
--- storage/maria/ma_open.c.orig
+++ storage/maria/ma_open.c
@@ -1847,7 +1847,6 @@ void _ma_set_index_pagecache_callbacks(P
 int _ma_open_datafile(MARIA_HA *info, MARIA_SHARE *share, const char *org_name,
                       File file_to_dup __attribute__((unused)))
 {
-  char *data_name= share->data_file_name.str;
   char real_data_name[FN_REFLEN];
 
   if (org_name)
@@ -1861,12 +1860,11 @@ int _ma_open_datafile(MARIA_HA *info, MA
         my_errno= HA_WRONG_CREATE_OPTION;
         return 1;
       }
-      data_name= real_data_name;
     }
   }
 
   info->dfile.file= share->bitmap.file.file=
-    my_open(data_name, share->mode | O_SHARE, MYF(MY_WME));
+    my_open(real_data_name, share->mode | O_SHARE, MYF(MY_WME));
   return info->dfile.file >= 0 ? 0 : 1;
 }
 
Index: storage/maria/ha_maria.cc
===================================================================
--- storage/maria/ha_maria.cc.orig
+++ storage/maria/ha_maria.cc
@@ -2980,7 +2980,7 @@ int ha_maria::create(const char *name, r
                      HA_CREATE_INFO *ha_create_info)
 {
   int error;
-  uint create_flags= 0, record_count, i;
+  uint create_flags= 0, record_count=0, i;
   char buff[FN_REFLEN];
   MARIA_KEYDEF *keydef;
   MARIA_COLUMNDEF *recinfo;
Index: storage/pbxt/src/discover_xt.cc
===================================================================
--- storage/pbxt/src/discover_xt.cc.orig
+++ storage/pbxt/src/discover_xt.cc
@@ -1337,8 +1337,8 @@ static bool mysql_create_table_no_lock(T
   char			path[FN_REFLEN];
   uint          path_length;
   const char	*alias;
-  uint			db_options, key_count;
-  KEY			*key_info_buffer;
+  uint			db_options, key_count=0;
+  KEY			*key_info_buffer=NULL;
   handler		*file;
   bool			error= TRUE;
   DBUG_ENTER("mysql_create_table_no_lock");
