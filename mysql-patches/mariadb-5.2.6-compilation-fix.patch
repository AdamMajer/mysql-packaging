PATCH-P0-HACK-SUSE: Fixing few compilation problems

Mostly minor things. Mostly just to make compiler happy as it can't determine
that everything is ok. But few things might actually worth reporting as they
could be handled better (mostly the write calls).

Maintainer: Michal Hrusecky <mhrusecky@suse.cz>

Index: client/readline.cc
===================================================================
--- client/readline.cc.orig
+++ client/readline.cc
@@ -55,7 +55,7 @@ LINE_BUFFER *batch_readline_init(ulong m
 char *batch_readline(LINE_BUFFER *line_buff)
 {
   char *pos;
-  ulong out_length;
+  ulong out_length=0;
   LINT_INIT(out_length);
 
   if (!(pos=intern_read_line(line_buff, &out_length)))
Index: storage/innodb_plugin/ut/ut0ut.c
===================================================================
--- storage/innodb_plugin/ut/ut0ut.c.orig
+++ storage/innodb_plugin/ut/ut0ut.c
@@ -553,7 +553,9 @@ ut_print_namel(
 				       trx ? trx->mysql_thd : NULL,
 				       table_id);
 
-	fwrite(buf, 1, bufend - buf, f);
+	if(fwrite(buf, 1, bufend - buf, f) != (size_t)max(0,(bufend - buf))) {
+		fprintf(stderr, "fwrite failed in ut_print_namel!!!\n");
+	}
 }
 
 /**********************************************************************//**
@@ -574,7 +576,8 @@ ut_copy_file(
 			? (size_t) len
 			: sizeof buf;
 		size_t	size = fread(buf, 1, maxs, src);
-		fwrite(buf, 1, size, dest);
+		if(fwrite(buf, size, 1, dest)<size)
+			break;
 		len -= (long) size;
 		if (size < maxs) {
 			break;
Index: storage/ndb/src/common/util/ndb_init.c
===================================================================
--- storage/ndb/src/common/util/ndb_init.c.orig
+++ storage/ndb/src/common/util/ndb_init.c
@@ -31,7 +31,7 @@ ndb_init()
 {
   if (my_init()) {
     const char* err = "my_init() failed - exit\n";
-    write(2, err, strlen(err));
+    fprintf(stderr, err, strlen(err));
     exit(1);
   }
   ndb_init_internal();
Index: sql/log.cc
===================================================================
--- sql/log.cc.orig
+++ sql/log.cc
@@ -1911,7 +1911,7 @@ static void setup_windows_event_source()
 
 static int find_uniq_filename(char *name)
 {
-  long                  number;
+  long                  number=0;
   uint                  i;
   char                  buff[FN_REFLEN];
   struct st_my_dir     *dir_info;
Index: sql/filesort.cc
===================================================================
--- sql/filesort.cc.orig
+++ sql/filesort.cc
@@ -440,16 +440,20 @@ static void dbug_print_record(TABLE *tab
     Field *field=  *pfield;
 
     if (field->is_null())
-      fwrite("NULL", sizeof(char), 4, DBUG_FILE);
+      if(fwrite("NULL", sizeof(char), 4, DBUG_FILE) != sizeof(char) * 4)
+      	break;
    
     if (field->type() == MYSQL_TYPE_BIT)
       (void) field->val_int_as_str(&tmp, 1);
     else
       field->val_str(&tmp);
 
-    fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE);
+    if(fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE) !=
+      sizeof(char) * tmp.length())
+        break;
     if (pfield[1])
-      fwrite(", ", sizeof(char), 2, DBUG_FILE);
+      if(fwrite(", ", sizeof(char), 2, DBUG_FILE) != sizeof(char) * 2)
+        break;
   }
   fprintf(DBUG_FILE, ")");
   if (print_rowid)
Index: sql/opt_range.cc
===================================================================
--- sql/opt_range.cc.orig
+++ sql/opt_range.cc
@@ -11376,7 +11376,8 @@ print_key(KEY_PART *key_part, const ucha
     {
       if (*key)
       {
-	fwrite("NULL",sizeof(char),4,DBUG_FILE);
+	if(fwrite("NULL",sizeof(char),4,DBUG_FILE)!=4*sizeof(char))
+	  break;
 	continue;
       }
       key++;					// Skip null byte
@@ -11387,7 +11388,8 @@ print_key(KEY_PART *key_part, const ucha
       (void) field->val_int_as_str(&tmp, 1);
     else
       field->val_str(&tmp);
-    fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE);
+    if(fwrite(tmp.ptr(),sizeof(char),tmp.length(),DBUG_FILE)!=sizeof(char)*tmp.length())
+      break;
     if (key+store_length < key_end)
       fputc('/',DBUG_FILE);
   }
Index: sql/sql_table.cc
===================================================================
--- sql/sql_table.cc.orig
+++ sql/sql_table.cc
@@ -7084,7 +7084,7 @@ view_err:
     need_copy_table= ALTER_TABLE_DATA_CHANGED;
   else
   {
-    enum_alter_table_change_level need_copy_table_res;
+    enum_alter_table_change_level need_copy_table_res = ALTER_TABLE_DATA_CHANGED;
     /* Check how much the tables differ. */
     if (compare_tables(table, alter_info,
                        create_info, order_num,
Index: sql/debug_sync.cc
===================================================================
--- sql/debug_sync.cc.orig
+++ sql/debug_sync.cc
@@ -1722,6 +1722,7 @@ static void debug_sync_execute(THD *thd,
     LINT_INIT(old_proc_info);
 
     action->execute--;
+    old_proc_info = NULL;
 
     /*
       If we will be going to wait, set proc_info for the PROCESSLIST table.
Index: unittest/mysys/lf-t.c
===================================================================
--- unittest/mysys/lf-t.c.orig
+++ unittest/mysys/lf-t.c
@@ -33,14 +33,13 @@ LF_HASH lf_hash;
 pthread_handler_t test_lf_pinbox(void *arg)
 {
   int    m= *(int *)arg;
-  int32 x= 0;
   LF_PINS *pins;
 
   my_thread_init();
 
   pins= lf_pinbox_get_pins(&lf_allocator.pinbox);
 
-  for (x= ((int)(intptr)(&m)); m ; m--)
+  for (; m ; m--)
   {
     lf_pinbox_put_pins(pins);
     pins= lf_pinbox_get_pins(&lf_allocator.pinbox);
Index: storage/xtradb/ut/ut0ut.c
===================================================================
--- storage/xtradb/ut/ut0ut.c.orig
+++ storage/xtradb/ut/ut0ut.c
@@ -552,8 +552,9 @@ ut_print_namel(
 				       name, namelen,
 				       trx ? trx->mysql_thd : NULL,
 				       table_id);
-
-	(void) fwrite(buf, 1, bufend - buf, f);
+	if(fwrite(buf, 1, bufend - buf, f) != (size_t)max(0,(bufend - buf))) {
+		fprintf(stderr, "fwrite failed in ut_print_namel!!!\n");
+	}
 }
 
 /**********************************************************************//**
@@ -574,7 +575,8 @@ ut_copy_file(
 			? (size_t) len
 			: sizeof buf;
 		size_t	size = fread(buf, 1, maxs, src);
-		(void) fwrite(buf, 1, size, dest);
+		if(fwrite(buf, size, 1, dest)<size)
+			break;
 		len -= (long) size;
 		if (size < maxs) {
 			break;
Index: storage/myisam/mi_check.c
===================================================================
--- storage/myisam/mi_check.c.orig
+++ storage/myisam/mi_check.c
@@ -947,7 +947,6 @@ int chk_data_link(HA_CHECK *param, MI_IN
   char llbuff[22],llbuff2[22],llbuff3[22];
   ha_checksum intern_record_checksum;
   ha_checksum key_checksum[HA_MAX_POSSIBLE_KEY];
-  my_bool static_row_size;
   MI_KEYDEF *keyinfo;
   MI_BLOCK_INFO block_info;
   DBUG_ENTER("chk_data_link");
@@ -972,7 +971,6 @@ int chk_data_link(HA_CHECK *param, MI_IN
   empty=info->s->pack.header_length;
 
   /* Check how to calculate checksum of rows */
-  static_row_size=1;
   if (info->s->data_file_type == COMPRESSED_RECORD)
   {
     for (field=0 ; field < info->s->base.fields ; field++)
@@ -980,7 +978,6 @@ int chk_data_link(HA_CHECK *param, MI_IN
       if (info->s->rec[field].base_type == FIELD_BLOB ||
 	  info->s->rec[field].base_type == FIELD_VARCHAR)
       {
-	static_row_size=0;
 	break;
       }
     }
Index: storage/innodb_plugin/btr/btr0cur.c
===================================================================
--- storage/innodb_plugin/btr/btr0cur.c.orig
+++ storage/innodb_plugin/btr/btr0cur.c
@@ -3252,6 +3252,8 @@ btr_record_not_null_field_in_rec(
 			/* Break if we hit the first NULL value */
 			break;
 		}
+		if(field == NULL)
+			break;
 	}
 }
 
Index: storage/maria/ma_open.c
===================================================================
--- storage/maria/ma_open.c.orig
+++ storage/maria/ma_open.c
@@ -1802,7 +1802,6 @@ void _ma_set_index_pagecache_callbacks(P
 int _ma_open_datafile(MARIA_HA *info, MARIA_SHARE *share, const char *org_name,
                       File file_to_dup __attribute__((unused)))
 {
-  char *data_name= share->data_file_name.str;
   char real_data_name[FN_REFLEN];
 
   if (org_name)
@@ -1816,7 +1815,6 @@ int _ma_open_datafile(MARIA_HA *info, MA
         my_errno= HA_WRONG_CREATE_OPTION;
         return 1;
       }
-      data_name= real_data_name;
     }
   }
 
Index: storage/maria/ma_key_recover.c
===================================================================
--- storage/maria/ma_key_recover.c.orig
+++ storage/maria/ma_key_recover.c
@@ -944,7 +944,7 @@ uint _ma_apply_redo_index(MARIA_HA *info
   uchar *buff;
   const uchar *header_end= header + head_length;
   uint page_offset= 0, org_page_length;
-  uint nod_flag, page_length, keypage_header, keynr;
+  uint page_length, keypage_header, keynr;
   uint max_page_size= share->max_index_block_size;
   int result;
   MARIA_PAGE page;
@@ -972,7 +972,6 @@ uint _ma_apply_redo_index(MARIA_HA *info
 
   keynr= _ma_get_keynr(share, buff);
   _ma_page_setup(&page, info, share->keyinfo + keynr, page_pos, buff);
-  nod_flag=    page.node;
   org_page_length= page_length= page.size;
 
   keypage_header= share->keypage_header;
Index: storage/maria/ha_maria.cc
===================================================================
--- storage/maria/ha_maria.cc.orig
+++ storage/maria/ha_maria.cc
@@ -2817,7 +2817,7 @@ int ha_maria::create(const char *name, r
                      HA_CREATE_INFO *ha_create_info)
 {
   int error;
-  uint create_flags= 0, record_count, i;
+  uint create_flags= 0, record_count=0, i;
   char buff[FN_REFLEN];
   MARIA_KEYDEF *keydef;
   MARIA_COLUMNDEF *recinfo;
Index: storage/pbxt/src/discover_xt.cc
===================================================================
--- storage/pbxt/src/discover_xt.cc.orig
+++ storage/pbxt/src/discover_xt.cc
@@ -1337,8 +1337,8 @@ static bool mysql_create_table_no_lock(T
   char			path[FN_REFLEN];
   uint          path_length;
   const char	*alias;
-  uint			db_options, key_count;
-  KEY			*key_info_buffer;
+  uint			db_options, key_count=0;
+  KEY			*key_info_buffer=NULL;
   handler		*file;
   bool			error= TRUE;
   DBUG_ENTER("mysql_create_table_no_lock");
